// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  BELUM_DIBAYAR
  DIBAYAR
  SIAP_DIAMBIL
  SUDAH_DIAMBIL
  SELESAI
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      UserRole @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  price         Int       // in cents/rupiah
  originalPrice Int?      // in cents/rupiah  
  image         String
  category      String    // Keep for backward compatibility
  categoryId    Int?      // New foreign key
  categoryModel Category? @relation(fields: [categoryId], references: [id])
  isNew         Boolean   @default(false)
  isOnSale      Boolean   @default(false)
  stock         Int       @default(0)
  hasVariants   Boolean   @default(false)
  variants      ProductVariant[]
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("products")
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String   // e.g. "Warna", "Ukuran"
  options   VariantOption[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

model VariantOption {
  id        Int            @id @default(autoincrement())
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  name      String         // e.g. "Merah", "L", "Katun"
  image     String?        // Optional image for this option
  orderItems OrderItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("variant_options")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(BELUM_DIBAYAR)
  totalAmount Int         // in rupiah
  items       OrderItem[]
  payment     Payment?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  orderId   Int
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int?           // Made nullable to allow product deletion
  product   Product?       @relation(fields: [productId], references: [id], onDelete: SetNull)
  quantity  Int
  price     Int            // price at the time of order
  variantOptions VariantOption[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("order_items")
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  order           Order         @relation(fields: [orderId], references: [id])
  xenditInvoiceId String        @unique
  status          PaymentStatus @default(PENDING)
  amount          Int           // in rupiah
  paymentUrl      String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model VariantType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("variant_types")
}
